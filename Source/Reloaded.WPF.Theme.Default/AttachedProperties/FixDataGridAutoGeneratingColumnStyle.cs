using System.Windows;
using System.Windows.Controls;
using Reloaded.WPF.MVVM;

namespace Reloaded.WPF.Theme.Default.AttachedProperties
{
    /// <summary>
    /// The <see cref="FixDataGridAutoGeneratingColumnStyle"/> is a simple dependency property that when
    /// applied to a DataGridView, ensures that the cells follow the actual theme style when the columns
    /// are autogenerated as opposed to the standard WPF style.
    /// </summary>
    public class FixDataGridAutoGeneratingColumnStyle : AttachedPropertyBase<FixDataGridAutoGeneratingColumnStyle, bool>
    {
        private const string TextBoxStyle = "DataGridTextStyle";
        private const string CheckBoxStyle = "DataGridCheckBoxStyle";
        private const string ComboBoxStyle = "DataGridComboBoxStyle";

        /// <inheritdoc />
        public override void OnValueChanged(DependencyObject sender, DependencyPropertyChangedEventArgs e)
        {
            bool newValue = GetValue(sender);

            if (sender is DataGrid grid)
            {
                if (newValue == false)
                {
                    grid.AutoGeneratingColumn -= DataGridAutoGeneratingColumn;
                }
                else
                {
                    if (grid.AutoGenerateColumns)
                        grid.AutoGeneratingColumn += DataGridAutoGeneratingColumn;
                }

                // TODO: I don't like this but it's the best I could do.
                // I want for the dependency property to work without the user manually inserting
                // them and not use a different class than standard DataGrid.

                // But the issue, given I load the theme at runtime, the control is loaded before
                // the dependency property is read from the default style (or so I believe).

                // This means that I must force a redraw of the current cells,
                // best way to do that is reassign the items source.
                var source = grid.ItemsSource;
                grid.ItemsSource = null;
                grid.ItemsSource = source;

                // Note: Cannot use GetBindingExpression, we are not guaranteed the items will
                // be data bound.
            }
        }

        /// <summary>
        /// When the column is being autogenerated, override style if it's a checkbox.
        /// </summary>
        private static void DataGridAutoGeneratingColumn(object sender, DataGridAutoGeneratingColumnEventArgs e)
        {
            if (sender is DataGrid grid)
            {
                // Get the window which hosts the grid (and default/reloaded theme will be accessible from).
                var window = Window.GetWindow(grid);

                if (window == null)
                    return;

                // And now theme the element to our own desires.
                if (e.Column is DataGridCheckBoxColumn checkboxColumn)
                {
                    var boxStyle = window.FindResource(CheckBoxStyle);
                    checkboxColumn.ElementStyle = (Style)boxStyle;
                    checkboxColumn.EditingElementStyle = (Style)boxStyle;
                }

                if (e.Column is DataGridTextColumn textColumn)
                {
                    var textBoxStyle = window.FindResource(TextBoxStyle);
                    var textBlockStyle = window.FindResource(typeof(TextBlock));
                    textColumn.ElementStyle = (Style)textBlockStyle;
                    textColumn.EditingElementStyle = (Style)textBoxStyle;
                }

                if (e.Column is DataGridComboBoxColumn comboBoxColumn)
                {
                    var comboBoxStyle = window.FindResource(ComboBoxStyle);
                    comboBoxColumn.EditingElementStyle = (Style)comboBoxStyle;
                }
            }
        }
    }
}
